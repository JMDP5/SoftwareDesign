/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.panel.radnik;

import view.panel.opstaekranskaforma.OpstaEkranskaForma;
import domen.Radnik;
import domen.Slika;
import domen.Zadatak;
import domen.Zaduzenje;
import imageprocessing.filter.FilteredImage;
import imageprocessing.filter.ImageFilterChain;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import properties.ProgramProperties;
import sesija.Sesija;
import view.kontorler.radnik.ObavljanjeZadatkaKontroler;

/**
 *
 * @author aleksandar
 */
public class ObavljanjeZadatkaPanel extends javax.swing.JPanel implements OpstaEkranskaForma {

    private BufferedImage originalnaSlika;
    List<FilteredImage> filteredImages;
    ObavljanjeZadatkaKontroler kontroler;
    Zadatak trenutniZadatak;
    Slika selektovanaSlika;

    /**
     * Creates new form ObavljanjeZadatka
     */
    public ObavljanjeZadatkaPanel() {
        initComponents();
        kontroler = new ObavljanjeZadatkaKontroler(this);
        jButtonSacuvajIzmene.setEnabled(false);
        popuniCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        processButton = new javax.swing.JButton();
        filteriZaPreprocesiranjePanel1 = new imageprocessing.view.FilteriZaPreprocesiranjePanel();
        originalImageLabel = new javax.swing.JLabel();
        jComboBoxZadaci = new javax.swing.JComboBox();
        jComboBoxSlike = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonSacuvajIzmene = new javax.swing.JButton();
        jPanelObradjenje = new javax.swing.JPanel();
        jLabelSlikaOpis = new javax.swing.JLabel();
        jLabelOpisZadatak = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1020, 640));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        processButton.setText("Obradi");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });
        add(processButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 45, 79, -1));
        add(filteriZaPreprocesiranjePanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 45, 625, 283));

        originalImageLabel.setText(" ");
        add(originalImageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 332, 200));

        jComboBoxZadaci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxZadaciActionPerformed(evt);
            }
        });
        add(jComboBoxZadaci, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 10, 190, -1));

        jComboBoxSlike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSlikeActionPerformed(evt);
            }
        });
        add(jComboBoxSlike, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 46, 190, -1));

        jLabel1.setText("Moji zadaci");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 15, -1, -1));

        jLabel2.setText("Slika");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 55, -1, -1));

        jButtonSacuvajIzmene.setText("Sacuvaj Izmene");
        jButtonSacuvajIzmene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSacuvajIzmeneActionPerformed(evt);
            }
        });
        add(jButtonSacuvajIzmene, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, -1, -1));

        jPanelObradjenje.setBorder(javax.swing.BorderFactory.createTitledBorder("Obradjene slike"));
        add(jPanelObradjenje, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 980, 250));

        jLabelSlikaOpis.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabelSlikaOpis.setText("Opis za sliku: ");
        add(jLabelSlikaOpis, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 350, 20));

        jLabelOpisZadatak.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabelOpisZadatak.setText("Opis za zadatak:");
        add(jLabelOpisZadatak, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 350, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        ImageFilterChain chain = null;
        jPanelObradjenje.removeAll();
        jButtonSacuvajIzmene.setEnabled(true);
        chain = filteriZaPreprocesiranjePanel1.getImageFilterChain();
        filteredImages = chain.processImageTest(originalnaSlika);

        for (FilteredImage filteredImage : filteredImages) {
            sacuvajSliku(filteredImage);
            jPanelObradjenje.add(new JLabel(new ImageIcon(filteredImage.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH))));
        }
        jPanelObradjenje.repaint();
        jPanelObradjenje.revalidate();
    }//GEN-LAST:event_processButtonActionPerformed

    private void jComboBoxZadaciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxZadaciActionPerformed
        trenutniZadatak = (Zadatak) jComboBoxZadaci.getSelectedItem();
        prikaziSlikeZaIzabraniZadatak(trenutniZadatak);
        jLabelOpisZadatak.setText("Opis za zadatak: " + trenutniZadatak.getOpis());
        jLabelSlikaOpis.setText("Opis za sliku: ");

    }//GEN-LAST:event_jComboBoxZadaciActionPerformed

    private void jComboBoxSlikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSlikeActionPerformed
        selektovanaSlika = (Slika) jComboBoxSlike.getSelectedItem();
        BufferedImage selected = selektovanaSlika.getSlika();
        this.originalnaSlika = selected;
        originalImageLabel.setIcon(new ImageIcon(selected.getScaledInstance(250, 200, Image.SCALE_SMOOTH)));
        String slikaOpis = "---nema opisa--";
        String selektovanOpis = selektovanaSlika.getOpis();
        if (selektovanOpis != null && !selektovanOpis.isEmpty() && !selektovanOpis.equals("null")) {
            slikaOpis = selektovanOpis;
        }
        jLabelSlikaOpis.setText("Opis za sliku: " + slikaOpis);
    }//GEN-LAST:event_jComboBoxSlikeActionPerformed

    private void jButtonSacuvajIzmeneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSacuvajIzmeneActionPerformed
        try {
            kontroler.sacuvajZadatak();
        } catch (IOException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        jPanelObradjenje.repaint();
        jPanelObradjenje.revalidate();
        dopuniSlikeUZadatku();

    }//GEN-LAST:event_jButtonSacuvajIzmeneActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private imageprocessing.view.FilteriZaPreprocesiranjePanel filteriZaPreprocesiranjePanel1;
    private javax.swing.JButton jButtonSacuvajIzmene;
    private javax.swing.JComboBox jComboBoxSlike;
    private javax.swing.JComboBox jComboBoxZadaci;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelOpisZadatak;
    private javax.swing.JLabel jLabelSlikaOpis;
    private javax.swing.JPanel jPanelObradjenje;
    private javax.swing.JLabel originalImageLabel;
    private javax.swing.JButton processButton;
    // End of variables declaration//GEN-END:variables

    private void sacuvajSliku(FilteredImage img) {
        try {
            String nazivSlike = selektovanaSlika.getNaziv().trim() + "-" + img.getFilterName().trim();
            // /home/aleksandar/Documents/Images/
            String putanja = ProgramProperties.getInstance().getLocation().trim() + nazivSlike;
            File outputfile = new File(putanja);
            ImageIO.write(img.getImage(), "jpg", outputfile);
            dodajObradjenuSliku(nazivSlike, putanja, img);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void popuniCombo() {
        List<Zadatak> zadaci = new ArrayList<>();
        Radnik r = (Radnik) Sesija.getInstance().getKorisnik();
        for (Zaduzenje z : r.getZaduzenje()) {
            if (!z.getZadatak().getStatus().startsWith("z")) {
                zadaci.add(z.getZadatak());
            }

        }
        jComboBoxZadaci.setModel(new DefaultComboBoxModel(zadaci.toArray()));
    }

    private void prikaziSlikeZaIzabraniZadatak(Zadatak z) {
        jComboBoxSlike.setModel(new DefaultComboBoxModel(z.getSlikeUBazi().toArray()));

    }

    private void dodajObradjenuSliku(String nazivSlike, String putanja, FilteredImage img) {
        Slika s = new Slika();
        String opis = nazivSlike.split("-")[1];
        s.setNaziv(nazivSlike);
        s.setOpis(opis);
        s.setPutanjaDoSlike(putanja);
        s.setSlika(img.getImage());
        s.setId(trenutniZadatak.vratiKljucZaSliku());
        s.setZadatak(trenutniZadatak);
        trenutniZadatak.getNoveSlike().add(s);
    }

    public Zadatak vratiTrenutniZadatak() {
        return trenutniZadatak;
    }

    public void izmeni() {
        jButtonSacuvajIzmene.setEnabled(false);
        popuniCombo();
        prikaziSlikeZaIzabraniZadatak(new Zadatak());
    }

    private void dopuniSlikeUZadatku() {
        for (Slika s : trenutniZadatak.getNoveSlike()) {;
            trenutniZadatak.getSlikeUBazi().add(s);
        }
        trenutniZadatak.setNoveSlike(new ArrayList<Slika>());
    }

}
